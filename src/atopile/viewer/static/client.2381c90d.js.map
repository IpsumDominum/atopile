{"mappings":"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","sources":["<anon>","src/visualiser_client/static/render_script.js"],"sourcesContent":["var $32645a58a1866f09$exports = {};\n// TODO: the root cell ID has a colon in it, which there shouldn't be\n//import { settings_dict } from \"./vis_settings\";\nconst { shapes: $32645a58a1866f09$var$shapes, util: $32645a58a1866f09$var$util, dia: $32645a58a1866f09$var$dia, anchors: $32645a58a1866f09$var$anchors } = joint;\n// Visual settings for the visualizer\nlet $32645a58a1866f09$var$settings_dict = {\n    common: {\n        backgroundColor: \"rgba(224, 233, 227, 0.3)\",\n        gridSize: 5,\n        parentPadding: 50,\n        fontFamily: \"monospace\",\n        fontHeightToPxRatio: 1.6,\n        fontLengthToPxRatio: 0.7\n    },\n    component: {\n        strokeWidth: 2,\n        fontSize: 8,\n        fontWeight: \"bold\",\n        defaultWidth: 60,\n        portPitch: 20,\n        defaultHeight: 50,\n        labelHorizontalMargin: 30,\n        labelVerticalMargin: 4,\n        titleMargin: 10,\n        pin: {\n            fontSize: 8,\n            fontWeight: \"normal\"\n        }\n    },\n    block: {\n        strokeWidth: 2,\n        boxRadius: 5,\n        strokeDasharray: \"4,4\",\n        label: {\n            fontSize: 10,\n            fontWeight: \"bold\"\n        }\n    },\n    link: {\n        strokeWidth: 1,\n        color: \"blue\"\n    },\n    stubs: {\n        fontSize: 8\n    }\n};\nfunction $32645a58a1866f09$var$customAnchor(view, magnet, ref, opt, endType, linkView) {\n    const elBBox = view.model.getBBox();\n    const magnetCenter = view.getNodeBBox(magnet).center();\n    const side = elBBox.sideNearestToPoint(magnetCenter);\n    let dx = 0;\n    let dy = 0;\n    const length = \"length\" in opt ? opt.length : 30;\n    switch(side){\n        case \"left\":\n            dx = -length;\n            break;\n        case \"right\":\n            dx = length;\n            break;\n        case \"top\":\n            dy = -length;\n            break;\n        case \"bottom\":\n            dy = length;\n            break;\n    }\n    return joint.anchors.center.call(this, view, magnet, ref, {\n        ...opt,\n        dx: dx,\n        dy: dy\n    }, endType, linkView);\n}\n// Base class for the visual elements\nclass $32645a58a1866f09$var$AtoElement extends $32645a58a1866f09$var$dia.Element {\n    defaults() {\n        return {\n            ...super.defaults,\n            instance_name: null,\n            config_origin_filename: null,\n            config_origin_module: []\n        };\n    }\n    // TODO: need to change to add port and add pins in port\n    addPortWithPins(port_group_name, port_location, pin_list) {\n        let port_label_position = $32645a58a1866f09$var$getPortLabelPosition(port_location);\n        let port_anchor = $32645a58a1866f09$var$getPortLabelAnchor(port_location);\n        let port_angle = $32645a58a1866f09$var$getPortLabelAngle(port_location);\n        let port_position = $32645a58a1866f09$var$getPortPosition(port_location);\n        let port_group = {};\n        port_group[port_group_name] = {\n            position: port_position,\n            attrs: {\n                portBody: {\n                    magnet: true,\n                    r: 2,\n                    fill: \"#FFFFFF\",\n                    stroke: \"#023047\"\n                }\n            },\n            label: {\n                position: {\n                    args: {\n                        x: port_label_position[0],\n                        y: port_label_position[1],\n                        angle: port_angle\n                    }\n                },\n                markup: [\n                    {\n                        tagName: \"text\",\n                        selector: \"label\",\n                        className: \"label-text\"\n                    }\n                ]\n            },\n            markup: [\n                {\n                    tagName: \"circle\",\n                    selector: \"portBody\"\n                }\n            ]\n        };\n        // Add the ports list to the element\n        this.prop({\n            \"ports\": {\n                \"groups\": port_group\n            }\n        });\n        // While we are creating the port, add the pins in the element\n        for (let pin of pin_list)this.addPort($32645a58a1866f09$var$createPort(pin[\"path\"], pin[\"name\"], port_group_name, port_anchor, true));\n    }\n    resizeBasedOnContent() {\n        let ports = this.getPorts();\n        if (ports) {\n            let port_buckets = {\n                \"top\": this.getGroupPorts(\"top\"),\n                \"bottom\": this.getGroupPorts(\"bottom\"),\n                \"left\": this.getGroupPorts(\"left\"),\n                \"right\": this.getGroupPorts(\"right\")\n            };\n            let ports_text_length = {\n                \"top\": \"\",\n                \"bottom\": \"\",\n                \"left\": \"\",\n                \"right\": \"\"\n            };\n            let dim_from_text = {\n                \"height\": 0,\n                \"width\": 0\n            };\n            let dim_from_ports = {\n                \"height\": 0,\n                \"width\": 0\n            };\n            // Extract the longest port label from each bucket\n            for(let port_bucket in port_buckets)if (port_buckets[port_bucket].length) {\n                for (let port of port_buckets[port_bucket])if (port[\"attrs\"][\"label\"][\"text\"].length > ports_text_length[port_bucket].length) ports_text_length[port_bucket] = port[\"attrs\"][\"label\"][\"text\"];\n            }\n            dim_from_text[\"height\"] = 2 * Math.max($32645a58a1866f09$var$measureText(ports_text_length[\"top\"], $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"], \"length\"), $32645a58a1866f09$var$measureText(ports_text_length[\"bottom\"], $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"], \"length\"));\n            dim_from_text[\"height\"] += $32645a58a1866f09$var$measureText(this[\"attributes\"][\"attrs\"][\"label\"][\"text\"], $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"], \"height\");\n            dim_from_text[\"height\"] += $32645a58a1866f09$var$settings_dict[\"component\"][\"labelVerticalMargin\"] * 2;\n            dim_from_text[\"width\"] = 2 * Math.max($32645a58a1866f09$var$measureText(ports_text_length[\"right\"], $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"], \"length\"), $32645a58a1866f09$var$measureText(ports_text_length[\"left\"], $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"], \"length\"));\n            dim_from_text[\"width\"] += $32645a58a1866f09$var$measureText(this[\"attributes\"][\"attrs\"][\"label\"][\"text\"], $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"], \"length\");\n            dim_from_ports[\"height\"] = (Math.max(port_buckets[\"right\"].length, port_buckets[\"left\"].length) + 1) * $32645a58a1866f09$var$settings_dict[\"component\"][\"portPitch\"];\n            dim_from_ports[\"width\"] = (Math.max(port_buckets[\"top\"].length, port_buckets[\"bottom\"].length) - 1) * $32645a58a1866f09$var$settings_dict[\"component\"][\"portPitch\"];\n            dim_from_ports[\"width\"] += 2 * $32645a58a1866f09$var$settings_dict[\"component\"][\"labelHorizontalMargin\"];\n            // Feature does not work without moveable ports\n            // if (port_buckets['right'].length != 0 || port_buckets['left'].length != 0) {\n            //     if (port_buckets['top'].length != 0 || port_buckets['bottom'].length != 0) {\n            //         dim_from_ports['width'] += 2 * settings_dict['component']['labelHorizontalMargin'];\n            //     }\n            // }\n            this.resize(Math.max(dim_from_text[\"width\"], dim_from_ports[\"width\"]), Math.max(dim_from_text[\"height\"], dim_from_ports[\"height\"]));\n        }\n    }\n    fitAncestorElements() {\n        var padding = $32645a58a1866f09$var$settings_dict[\"common\"][\"parentPadding\"];\n        this.fitParent({\n            deep: true,\n            padding: {\n                top: padding,\n                left: padding,\n                right: padding,\n                bottom: padding\n            }\n        });\n    }\n    applyParentAttrs(attrs) {\n        if (\"position\" in attrs) // Deep setting ensures that the element is placed relative to all parents\n        this.position(attrs[\"position\"][\"x\"], attrs[\"position\"][\"y\"], {\n            deep: true\n        });\n    }\n}\n// Class for a component\nclass $32645a58a1866f09$var$AtoComponent extends $32645a58a1866f09$var$AtoElement {\n    defaults() {\n        return {\n            ...super.defaults(),\n            type: \"AtoComponent\",\n            attrs: {\n                body: {\n                    fill: \"white\",\n                    z: 10,\n                    stroke: \"black\",\n                    strokeWidth: $32645a58a1866f09$var$settings_dict[\"component\"][\"strokeWidth\"],\n                    width: \"calc(w)\",\n                    height: \"calc(h)\",\n                    rx: 5,\n                    ry: 5\n                },\n                label: {\n                    text: \"Component\",\n                    fill: \"black\",\n                    fontSize: $32645a58a1866f09$var$settings_dict[\"component\"][\"fontSize\"],\n                    fontWeight: $32645a58a1866f09$var$settings_dict[\"component\"][\"fontWeight\"],\n                    textVerticalAnchor: \"middle\",\n                    textAnchor: \"middle\",\n                    fontFamily: $32645a58a1866f09$var$settings_dict[\"common\"][\"fontFamily\"],\n                    x: \"calc(w/2)\",\n                    y: \"calc(h/2)\"\n                }\n            }\n        };\n    }\n    preinitialize() {\n        this.markup = $32645a58a1866f09$var$util.svg`\n            <rect @selector=\"body\" />\n            <text @selector=\"label\" />\n        `;\n    }\n}\n// Class for a block\n// For the moment, blocks and components are separate.\n// We might want to combine them in the future.\nclass $32645a58a1866f09$var$AtoBlock extends $32645a58a1866f09$var$AtoElement {\n    defaults() {\n        return {\n            ...super.defaults(),\n            type: \"AtoComponent\",\n            collapsed: false,\n            attrs: {\n                body: {\n                    fill: \"transparent\",\n                    stroke: \"#333\",\n                    strokeWidth: $32645a58a1866f09$var$settings_dict[\"block\"][\"strokeWidth\"],\n                    strokeDasharray: $32645a58a1866f09$var$settings_dict[\"block\"][\"strokeDasharray\"],\n                    width: \"calc(w)\",\n                    height: \"calc(h)\",\n                    rx: $32645a58a1866f09$var$settings_dict[\"block\"][\"boxRadius\"],\n                    ry: $32645a58a1866f09$var$settings_dict[\"block\"][\"boxRadius\"]\n                },\n                label: {\n                    text: \"Block\",\n                    fill: \"black\",\n                    textVerticalAnchor: \"top\",\n                    fontSize: $32645a58a1866f09$var$settings_dict[\"block\"][\"label\"][\"fontSize\"],\n                    fontWeight: $32645a58a1866f09$var$settings_dict[\"block\"][\"label\"][\"fontWeight\"],\n                    textAnchor: \"start\",\n                    fontFamily: $32645a58a1866f09$var$settings_dict[\"common\"][\"fontFamily\"],\n                    x: 8,\n                    y: 8\n                }\n            }\n        };\n    }\n    preinitialize() {\n        this.markup = $32645a58a1866f09$var$util.svg`\n            <rect @selector=\"body\" />\n            <text @selector=\"label\" />\n        `;\n    }\n    updateChildrenVisibility() {\n        const collapsed = this.isCollapsed();\n        this.getEmbeddedCells().forEach((child)=>child.set(\"hidden\", collapsed));\n    }\n}\nconst $32645a58a1866f09$var$cellNamespace = {\n    ...$32645a58a1866f09$var$shapes,\n    AtoElement: $32645a58a1866f09$var$AtoElement,\n    AtoComponent: $32645a58a1866f09$var$AtoComponent,\n    AtoBlock: $32645a58a1866f09$var$AtoBlock\n};\nfunction $32645a58a1866f09$var$createPort(uuid, port_name, port_group_name, port_anchor) {\n    return {\n        id: uuid,\n        group: port_group_name,\n        attrs: {\n            label: {\n                text: port_name,\n                fontFamily: $32645a58a1866f09$var$settings_dict[\"common\"][\"fontFamily\"],\n                fontSize: $32645a58a1866f09$var$settings_dict[\"component\"][\"pin\"][\"fontSize\"],\n                fontWeight: $32645a58a1866f09$var$settings_dict[\"component\"][\"pin\"][\"fontWeight\"],\n                textAnchor: port_anchor\n            }\n        }\n    };\n}\nfunction $32645a58a1866f09$var$getPortLabelPosition(location) {\n    switch(location){\n        case \"top\":\n            return [\n                0,\n                5\n            ];\n        case \"bottom\":\n            return [\n                0,\n                -5\n            ];\n        case \"left\":\n            return [\n                5,\n                0\n            ];\n        case \"right\":\n            return [\n                -5,\n                0\n            ];\n        default:\n            return [\n                0,\n                0\n            ];\n    }\n}\nfunction $32645a58a1866f09$var$getPortLabelAnchor(location) {\n    switch(location){\n        case \"top\":\n            return \"end\";\n        case \"bottom\":\n            return \"start\";\n        case \"left\":\n            return \"start\";\n        case \"right\":\n            return \"end\";\n        default:\n            return \"middle\";\n    }\n}\nfunction $32645a58a1866f09$var$getPortLabelAngle(location) {\n    switch(location){\n        case \"top\":\n            return -90;\n        case \"bottom\":\n            return -90;\n        case \"left\":\n            return 0;\n        case \"right\":\n            return 0;\n        default:\n            return 0;\n    }\n}\nfunction $32645a58a1866f09$var$getPortPosition(location) {\n    switch(location){\n        case \"top\":\n            return {\n                name: \"line\",\n                args: {\n                    start: {\n                        x: $32645a58a1866f09$var$settings_dict[\"component\"][\"labelHorizontalMargin\"],\n                        y: 0\n                    },\n                    end: {\n                        x: \"calc(w - \" + $32645a58a1866f09$var$settings_dict[\"component\"][\"labelHorizontalMargin\"] + \")\",\n                        y: 0\n                    }\n                }\n            };\n        case \"bottom\":\n            return {\n                name: \"line\",\n                args: {\n                    start: {\n                        x: $32645a58a1866f09$var$settings_dict[\"component\"][\"labelHorizontalMargin\"],\n                        y: \"calc(h)\"\n                    },\n                    end: {\n                        x: \"calc(w - \" + $32645a58a1866f09$var$settings_dict[\"component\"][\"labelHorizontalMargin\"] + \")\",\n                        y: \"calc(h)\"\n                    }\n                }\n            };\n        case \"left\":\n            return {\n                name: \"line\",\n                args: {\n                    start: {\n                        x: 0,\n                        y: $32645a58a1866f09$var$settings_dict[\"component\"][\"labelVerticalMargin\"]\n                    },\n                    end: {\n                        x: 0,\n                        y: \"calc(h - \" + $32645a58a1866f09$var$settings_dict[\"component\"][\"labelVerticalMargin\"] + \")\"\n                    }\n                }\n            };\n        case \"right\":\n            return {\n                name: \"line\",\n                args: {\n                    start: {\n                        x: \"calc(w)\",\n                        y: $32645a58a1866f09$var$settings_dict[\"component\"][\"labelVerticalMargin\"]\n                    },\n                    end: {\n                        x: \"calc(w)\",\n                        y: \"calc(h - \" + $32645a58a1866f09$var$settings_dict[\"component\"][\"labelVerticalMargin\"] + \")\"\n                    }\n                }\n            };\n        default:\n            return 0;\n    }\n}\n// Definitely need to update this garbage at some point\nfunction $32645a58a1866f09$var$measureText(text, text_size, direction) {\n    var string = text + \"\";\n    var lines = string.split(\"\\n\");\n    var width = 0;\n    for (let line of lines){\n        var length = line.length;\n        if (length > width) width = length;\n    }\n    if (direction == \"length\") // divide by 3 to go from font size to pxl, will have to fix\n    return width * text_size * $32645a58a1866f09$var$settings_dict[\"common\"][\"fontLengthToPxRatio\"];\n    else if (direction == \"height\") return lines.length * text_size * $32645a58a1866f09$var$settings_dict[\"common\"][\"fontHeightToPxRatio\"];\n    else return 0;\n}\nfunction $32645a58a1866f09$var$addStub(block_id, port_id, label) {\n    let added_stub = new $32645a58a1866f09$var$shapes.standard.Link({\n        source: {\n            id: block_id,\n            port: port_id,\n            anchor: {\n                name: \"center\"\n            }\n        },\n        target: {\n            id: block_id,\n            port: port_id,\n            anchor: {\n                name: \"customAnchor\"\n            },\n            connectionPoint: {\n                name: \"anchor\"\n            }\n        }\n    });\n    added_stub.attr({\n        line: {\n            \"stroke\": $32645a58a1866f09$var$settings_dict[\"link\"][\"color\"],\n            \"stroke-width\": $32645a58a1866f09$var$settings_dict[\"link\"][\"strokeWidth\"],\n            targetMarker: {\n                \"type\": \"none\"\n            }\n        },\n        z: 0\n    });\n    added_stub.appendLabel({\n        attrs: {\n            text: {\n                text: label,\n                fontFamily: $32645a58a1866f09$var$settings_dict[\"common\"][\"fontFamily\"],\n                fontSize: $32645a58a1866f09$var$settings_dict[\"stubs\"][\"fontSize\"],\n                //textVerticalAnchor: \"middle\",\n                textAnchor: \"middle\"\n            }\n        },\n        position: {\n            distance: .9,\n            offset: -5,\n            angle: 0,\n            args: {\n                keepGradient: true,\n                ensureLegibility: true\n            }\n        }\n    });\n    $32645a58a1866f09$var$graph.addCell(added_stub);\n}\nfunction $32645a58a1866f09$var$addLink(source_block_id, source_port_id, target_block_id, target_port_id) {\n    var added_link = new $32645a58a1866f09$var$shapes.standard.Link({\n        source: {\n            id: source_block_id,\n            port: source_port_id\n        },\n        target: {\n            id: target_block_id,\n            port: target_port_id\n        }\n    });\n    added_link.attr({\n        line: {\n            \"stroke\": $32645a58a1866f09$var$settings_dict[\"link\"][\"color\"],\n            \"stroke-width\": $32645a58a1866f09$var$settings_dict[\"link\"][\"strokeWidth\"],\n            targetMarker: {\n                \"type\": \"none\"\n            }\n        },\n        z: 0\n    });\n    added_link.router(\"manhattan\", {\n        perpendicular: true,\n        step: $32645a58a1866f09$var$settings_dict[\"common\"][\"gridSize\"]\n    });\n    added_link.addTo($32645a58a1866f09$var$graph);\n}\n// Return the cell id and port id from port name and current path\n// If the link spans deeper than one module, a port is added to the module\n// TODO: what happens if the port is multiple layers deep?\n// TODO: Currently only adding the top link\nfunction $32645a58a1866f09$var$getLinkAddress(port, current_path, embedded_cells) {\n    let port_path = $32645a58a1866f09$var$concatenatePathAndName(current_path, port);\n    let port_name_depth = $32645a58a1866f09$var$computeNameDepth(port);\n    let cell_id;\n    let first_element;\n    switch(port_name_depth){\n        case 1:\n            cell_id = current_path;\n            break;\n        case 2:\n            first_element = $32645a58a1866f09$var$popFirstNameElementFromName(port);\n            cell_id = $32645a58a1866f09$var$concatenatePathAndName(current_path, first_element[\"pop\"]);\n            break;\n        default:\n            console.log(\"default\");\n            first_element = $32645a58a1866f09$var$popFirstNameElementFromName(port);\n            cell_id = $32645a58a1866f09$var$concatenatePathAndName(current_path, first_element[\"pop\"]);\n            for (let cell of embedded_cells)if (cell[\"id\"] == cell_id) cell.addPortWithPins(\"top\", \"top\", [\n                {\n                    \"path\": port_path,\n                    \"name\": first_element[\"remaining\"]\n                }\n            ]);\n            break;\n    }\n    console.log({\n        \"cell_id\": cell_id,\n        \"port_id\": port_path\n    });\n    return {\n        \"cell_id\": cell_id,\n        \"port_id\": port_path\n    };\n}\nfunction $32645a58a1866f09$var$addLinks(element, current_path, embedded_cells) {\n    for (let link of element[\"links\"]){\n        let source_address = $32645a58a1866f09$var$getLinkAddress(link[\"source\"], current_path, embedded_cells);\n        let target_address = $32645a58a1866f09$var$getLinkAddress(link[\"target\"], current_path, embedded_cells);\n        let is_stub = false;\n        for (let link_config of (element.config || {}).signals || [])if (link_config[\"name\"] == link[\"name\"] && link_config[\"is_stub\"]) {\n            is_stub = true;\n            // if not a module (don't want stubs at module level)\n            if (current_path.length != source_address[\"cell_id\"].length) $32645a58a1866f09$var$addStub(source_address[\"cell_id\"], source_address[\"port_id\"], link[\"name\"]);\n            // if not a module (don;t want stubs at module level)\n            if (current_path.length != target_address[\"cell_id\"].length) $32645a58a1866f09$var$addStub(target_address[\"cell_id\"], target_address[\"port_id\"], link[\"name\"]);\n        }\n        if (!is_stub) $32645a58a1866f09$var$addLink(source_address[\"cell_id\"], source_address[\"port_id\"], target_address[\"cell_id\"], target_address[\"port_id\"]);\n    }\n}\nfunction $32645a58a1866f09$var$getElementTitle(element) {\n    if (element[\"instance_of\"] != null) return `${element[\"name\"]} \\n(${$32645a58a1866f09$var$popLastPathElementFromPath(element[\"instance_of\"]).name})`;\n    else return element[\"name\"];\n}\nfunction $32645a58a1866f09$var$addPins(jointJSObject, element, path) {\n    // Create the default port location\n    let ports_to_add = {};\n    // Create the ports that are defined in the config\n    for (let port of (element.config || {}).ports || [])ports_to_add[port.name || \"top\"] = {\n        \"location\": port.location || \"top\",\n        \"pins\": []\n    };\n    let config_found;\n    for (let pin_to_add of element[\"pins\"]){\n        pin_to_add[\"path\"] = $32645a58a1866f09$var$concatenatePathAndName(path, pin_to_add[\"name\"]);\n        config_found = false;\n        for (let config_pin of (element.config || {}).pins || [])// If a port is defined, add it to it designated port\n        if (pin_to_add[\"name\"] == config_pin[\"name\"]) {\n            ports_to_add[config_pin[\"port\"]][\"pins\"].push(pin_to_add);\n            config_found = true;\n        }\n        // If no port is defined, add it to the default port\n        if (!config_found) {\n            if (!ports_to_add[\"top\"]) ports_to_add[\"top\"] = {\n                \"location\": \"top\",\n                \"pins\": []\n            };\n            ports_to_add[\"top\"][\"pins\"].push(pin_to_add);\n        }\n    }\n    for(let port in ports_to_add)if (ports_to_add[port][\"pins\"].length > 0) jointJSObject.addPortWithPins(port, ports_to_add[port][\"location\"], ports_to_add[port][\"pins\"]);\n}\nfunction $32645a58a1866f09$var$createComponent(element, parent, path) {\n    let title = $32645a58a1866f09$var$getElementTitle(element);\n    let comp_width = $32645a58a1866f09$var$measureText(title, $32645a58a1866f09$var$settings_dict[\"component\"][\"pin\"][\"fontSize\"], \"length\") + 2 * $32645a58a1866f09$var$settings_dict[\"component\"][\"titleMargin\"];\n    let comp_height = $32645a58a1866f09$var$measureText(title, $32645a58a1866f09$var$settings_dict[\"component\"][\"pin\"][\"fontSize\"], \"height\") + 2 * $32645a58a1866f09$var$settings_dict[\"component\"][\"titleMargin\"];\n    var component = new $32645a58a1866f09$var$AtoComponent({\n        id: path,\n        instance_name: element[\"name\"],\n        size: {\n            width: comp_width,\n            height: comp_height\n        },\n        attrs: {\n            label: {\n                text: title\n            }\n        },\n        config_origin_filename: element.config_origin_filename,\n        config_origin_module: element.config_origin_module\n    });\n    $32645a58a1866f09$var$addPins(component, element, path);\n    component.resizeBasedOnContent();\n    component.addTo($32645a58a1866f09$var$graph);\n    if (parent) $32645a58a1866f09$var$addElementToElement(component, parent);\n    return component;\n}\nfunction $32645a58a1866f09$var$createBlock(element, parent, path) {\n    let title = $32645a58a1866f09$var$getElementTitle(element);\n    let block = new $32645a58a1866f09$var$AtoBlock({\n        id: path,\n        instance_name: element[\"name\"],\n        size: {\n            width: 200,\n            height: 100\n        },\n        attrs: {\n            label: {\n                text: title\n            }\n        },\n        config_origin_filename: element.config_origin_filename,\n        config_origin_module: element.config_origin_module\n    });\n    $32645a58a1866f09$var$addPins(block, element, path);\n    block.addTo($32645a58a1866f09$var$graph);\n    if (parent) $32645a58a1866f09$var$addElementToElement(block, parent);\n    return block;\n}\nfunction $32645a58a1866f09$var$addElementToElement(block_to_add, to_block) {\n    to_block.embed(block_to_add);\n}\nfunction $32645a58a1866f09$var$returnConfigFileName(string) {\n    if (string) {\n        const [file, module] = string.split(\":\");\n        return {\n            \"file\": file,\n            \"module\": module\n        };\n    } else return null;\n}\nfunction $32645a58a1866f09$var$concatenatePathAndName(path, name) {\n    if (path == null) return name + \":\";\n    else if (path.slice(-1) == \":\") return path + name;\n    else return path + \".\" + name;\n}\n// This function does not support complete paths\n// Only names that are separated by a .\nfunction $32645a58a1866f09$var$computeNameDepth(path) {\n    let name_list = path.split(\".\");\n    return name_list.length;\n}\nfunction $32645a58a1866f09$var$popFirstNameElementFromName(name) {\n    // Split the blocks\n    const blocks = name.split(\".\");\n    const remaining_blocks = blocks.slice(1, blocks.length);\n    const remaining_name = remaining_blocks.join(\".\");\n    const pop = blocks[0];\n    return {\n        \"pop\": pop,\n        \"remaining\": remaining_name\n    };\n}\nfunction $32645a58a1866f09$var$popLastPathElementFromPath(path) {\n    // Split the file name and the blocks\n    const file_block = path.split(\":\");\n    const file = file_block[0];\n    // Split the blocks\n    const blocks = file_block[1].split(\".\");\n    const path_blocks = blocks.slice(0, blocks.length - 1);\n    const remaining_path = file + \":\" + path_blocks.join(\".\");\n    const name = blocks[blocks.length - 1];\n    return {\n        \"file\": file,\n        \"path\": remaining_path,\n        \"name\": name\n    };\n}\nfunction $32645a58a1866f09$var$applyParentConfig(element, child_attrs) {\n    if (child_attrs !== null && Object.keys(child_attrs).length > 0) {\n        for(let attrs in child_attrs)if (attrs == element[\"name\"]) element[\"jointObject\"].applyParentAttrs(child_attrs[attrs]);\n    }\n}\nasync function $32645a58a1866f09$var$generateJointjsGraph(circuit, max_depth, current_depth = 0, path = null, parent = null, child_attrs = null) {\n    let downstream_path;\n    let new_depth = current_depth + 1;\n    if (current_depth <= max_depth) {\n        for (let element of circuit){\n            var joint_object = null;\n            if (element[\"type\"] == \"component\") {\n                downstream_path = $32645a58a1866f09$var$concatenatePathAndName(path, element[\"name\"]);\n                joint_object = $32645a58a1866f09$var$createComponent(element, parent, downstream_path);\n                element[\"jointObject\"] = joint_object;\n                if (parent) $32645a58a1866f09$var$addElementToElement(joint_object, parent);\n                $32645a58a1866f09$var$applyParentConfig(element, child_attrs);\n            } else if (element[\"type\"] == \"module\") {\n                downstream_path = $32645a58a1866f09$var$concatenatePathAndName(path, element[\"name\"]);\n                // Create the module\n                joint_object = $32645a58a1866f09$var$createBlock(element, parent, downstream_path);\n                element[\"jointObject\"] = joint_object;\n                if (parent) $32645a58a1866f09$var$addElementToElement(joint_object, parent);\n                // Call the function recursively on children\n                if (await $32645a58a1866f09$var$generateJointjsGraph(element[\"blocks\"], max_depth, new_depth, downstream_path, joint_object, element[\"config\"][\"child_attrs\"])) {\n                    $32645a58a1866f09$var$addLinks(element, downstream_path, joint_object.getEmbeddedCells());\n                    $32645a58a1866f09$var$applyParentConfig(element, child_attrs);\n                }\n                // FIXME:\n                // Position the root element in the middle of the screen\n                if (current_depth == 0) {\n                    let paperSize = $32645a58a1866f09$var$paper.getComputedSize();\n                    let rootSize = joint_object.size();\n                    // Calculate the position for the center of the paper.\n                    let posX = paperSize.width / 2 - rootSize.width / 2;\n                    let posY = paperSize.height / 2 - rootSize.height / 2;\n                    // Position the rectangle in the center of the paper.\n                    joint_object.position(posX, posY);\n                // TODO: bring the other content with it\n                }\n            } else if (element[\"type\"] == \"file\") {\n                downstream_path = $32645a58a1866f09$var$concatenatePathAndName(path, element[\"name\"]);\n                await $32645a58a1866f09$var$generateJointjsGraph(element[\"blocks\"], max_depth, new_depth, downstream_path);\n            } else // raise an error because we don't know what to do with this element\n            // TODO: raise an error\n            console.log(\"Unknown element type: \" + element[\"type\"]);\n        }\n        return true;\n    } else return false;\n}\nasync function $32645a58a1866f09$var$populateConfigFromBackend(circuit_dict, file_name = null) {\n    let populated_circuit = [];\n    let config_location_name;\n    for (let element of circuit_dict){\n        if (element.type == \"component\") {\n            if (element.instance_of !== null) {\n                config_location_name = $32645a58a1866f09$var$returnConfigFileName(element.instance_of);\n                element.config_origin_filename = $32645a58a1866f09$var$getConfigFilenameFromAto(config_location_name.file);\n                element.config_origin_module = config_location_name.module;\n                const config = await $32645a58a1866f09$var$loadFileConfig(config_location_name.file);\n                element[\"config\"] = config[config_location_name.module] || {};\n            }\n        } else if (element.type == \"module\") {\n            let config = null;\n            element.config = {};\n            if (element.instance_of !== null) {\n                config_location_name = $32645a58a1866f09$var$returnConfigFileName(element.instance_of);\n                element.config_origin_filename = $32645a58a1866f09$var$getConfigFilenameFromAto(config_location_name.file);\n                element.config_origin_module = config_location_name.module;\n                config = await $32645a58a1866f09$var$loadFileConfig(config_location_name.file);\n            }\n            if (config) {\n                if (Object.keys(config).length !== 0) {\n                    if (config.hasOwnProperty(config_location_name[\"module\"])) element[\"config\"] = config[config_location_name[\"module\"]];\n                }\n            }\n            element[\"blocks\"] = await $32645a58a1866f09$var$populateConfigFromBackend(element[\"blocks\"]);\n        } else if (element[\"type\"] == \"file\") // If file, the following block will not be an instance, so it needs to know it's parent file\n        // to fetch the config\n        element[\"blocks\"] = await $32645a58a1866f09$var$populateConfigFromBackend(element[\"blocks\"], element[\"name\"]);\n        else console.log(\"unknown block type\");\n        populated_circuit.push(element);\n    }\n    return populated_circuit;\n}\nconst $32645a58a1866f09$var$graph = new $32645a58a1866f09$var$dia.Graph({}, {\n    cellNamespace: $32645a58a1866f09$var$cellNamespace\n});\nconst $32645a58a1866f09$var$paper = new joint.dia.Paper({\n    el: document.getElementById(\"atopilePaper\"),\n    model: $32645a58a1866f09$var$graph,\n    width: \"100%\",\n    height: \"100%\",\n    gridSize: $32645a58a1866f09$var$settings_dict[\"common\"][\"gridSize\"],\n    drawGrid: true,\n    background: {\n        color: $32645a58a1866f09$var$settings_dict[\"common\"][\"backgroundColor\"]\n    },\n    interactive: true,\n    snapLinks: true,\n    linkPinning: false,\n    magnetThreshold: \"onleave\",\n    cellViewNamespace: $32645a58a1866f09$var$cellNamespace,\n    anchorNamespace: {\n        ...joint.anchors,\n        customAnchor: $32645a58a1866f09$var$customAnchor\n    }\n});\nfunction $32645a58a1866f09$var$fill_paper() {\n    $32645a58a1866f09$var$paper.setDimensions(window.innerWidth, window.innerHeight);\n}\nwindow.onload = $32645a58a1866f09$var$fill_paper;\nwindow.onresize = $32645a58a1866f09$var$fill_paper;\nlet $32645a58a1866f09$var$pin_to_element_association = {};\n$32645a58a1866f09$var$paper.on(\"link:mouseenter\", function(linkView) {\n    linkView.showTools();\n    linkView.highlight();\n});\n$32645a58a1866f09$var$paper.on(\"link:mouseleave\", function(linkView) {\n    linkView.hideTools();\n    linkView.unhighlight();\n});\n$32645a58a1866f09$var$graph.on(\"change:position\", function(cell) {\n    // `fitParent()` method is defined at `joint.shapes.container.Base` in `./joint.shapes.container.js`\n    cell.fitAncestorElements();\n});\nfunction $32645a58a1866f09$var$getConfigFilenameFromAto(ato_file_name) {\n    // Strip .ato from the name\n    let striped_file_name = ato_file_name.replace(\".ato\", \"\");\n    return striped_file_name + \".vis.json\";\n}\n// Fetch a file visual config from the server\nasync function $32645a58a1866f09$var$loadFileConfig(file_name) {\n    let address = \"/api/config/\" + $32645a58a1866f09$var$getConfigFilenameFromAto(file_name);\n    //address = \"/api/circuit/bike_light.ato:BikeLight\";\n    let response;\n    try {\n        response = await fetch(address);\n    } catch (error) {\n        console.log(\"Could not fetch config \", error);\n    }\n    if (response.ok) return await response.json();\n    else {\n        console.log(`HTTP Response Code: ${response?.status}`);\n        return null;\n    }\n}\n// Fetch a circuit dict from the server\nasync function $32645a58a1866f09$var$loadCircuit() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const response = await fetch(\"/api/circuit/\" + urlParams.get(\"circuit\"));\n    const circuit_data = await response.json();\n    console.log(\"data received from backend\");\n    console.log(circuit_data);\n    let config_populated_circuit = await $32645a58a1866f09$var$populateConfigFromBackend([\n        circuit_data\n    ]);\n    console.log(config_populated_circuit);\n    $32645a58a1866f09$var$generateJointjsGraph(config_populated_circuit, 1);\n}\n// flag to help rate limit calls to savePositions\nvar $32645a58a1866f09$var$stuff_has_moved = false;\n$32645a58a1866f09$var$paper.on(\"cell:pointerup\", function(cell, evt, x, y) {\n    if (cell.model instanceof $32645a58a1866f09$var$AtoComponent || cell.model instanceof $32645a58a1866f09$var$AtoBlock) $32645a58a1866f09$var$stuff_has_moved = true;\n});\nfunction $32645a58a1866f09$var$savePositions() {\n    let requests_to_make = {};\n    $32645a58a1866f09$var$graph.getCells().forEach(function(cell) {\n        if (cell instanceof $32645a58a1866f09$var$AtoComponent || cell instanceof $32645a58a1866f09$var$AtoBlock) {\n            console.log(cell.id);\n            let parent = cell.getParentCell();\n            if (!parent) return; // skip the root element\n            let origin_file = parent.attributes.config_origin_filename;\n            let origin_module = parent.attributes.config_origin_module;\n            let instance_name = cell.attributes.instance_name;\n            if (!requests_to_make[origin_file]) requests_to_make[origin_file] = {};\n            if (!requests_to_make[origin_file][origin_module]) requests_to_make[origin_file][origin_module] = {\n                \"child_attrs\": {}\n            };\n            requests_to_make[origin_file][origin_module][\"child_attrs\"][instance_name] = {\n                \"position\": {\n                    x: cell.attributes.position.x - parent.attributes.position.x,\n                    y: cell.attributes.position.y - parent.attributes.position.y\n                }\n            };\n        }\n    });\n    for(let origin_file in requests_to_make){\n        let requestOptions = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(requests_to_make[origin_file])\n        };\n        fetch(\"/api/config/\" + origin_file, requestOptions);\n    }\n    // reset the flag\n    $32645a58a1866f09$var$stuff_has_moved = false;\n}\n// rate limit the calls to savePositions\nsetInterval(function() {\n    if ($32645a58a1866f09$var$stuff_has_moved) {\n        console.log(\"saving positions\");\n        $32645a58a1866f09$var$savePositions();\n    }\n}, 1000);\n$32645a58a1866f09$var$loadCircuit();\n\n\n//# sourceMappingURL=client.2381c90d.js.map\n","// TODO: the root cell ID has a colon in it, which there shouldn't be\n\n//import { settings_dict } from \"./vis_settings\";\n\nconst { shapes, util, dia, anchors } = joint;\n\n// Visual settings for the visualizer\nlet settings_dict = {\n    common: {\n        backgroundColor: 'rgba(224, 233, 227, 0.3)',\n        gridSize: 5,\n        parentPadding: 50,\n        fontFamily: \"monospace\",\n        fontHeightToPxRatio: 1.6,\n        fontLengthToPxRatio: 0.7,\n    },\n    component : {\n        strokeWidth: 2,\n        fontSize: 8,\n        fontWeight: \"bold\",\n        defaultWidth: 60,\n        portPitch: 20,\n        defaultHeight: 50,\n        labelHorizontalMargin: 30,\n        labelVerticalMargin: 4,\n        titleMargin: 10,\n        pin: {\n            fontSize: 8,\n            fontWeight: \"normal\",\n        },\n    },\n    block : {\n        strokeWidth: 2,\n        boxRadius: 5,\n        strokeDasharray: '4,4',\n        label: {\n            fontSize: 10,\n            fontWeight: \"bold\",\n        }\n    },\n    link: {\n        strokeWidth: 1,\n        color: \"blue\"\n    },\n    stubs: {\n        fontSize: 8,\n    }\n}\n\nfunction customAnchor(view, magnet, ref, opt, endType, linkView) {\n    const elBBox = view.model.getBBox();\n    const magnetCenter = view.getNodeBBox(magnet).center();\n    const side = elBBox.sideNearestToPoint(magnetCenter);\n    let dx = 0;\n    let dy = 0;\n    const length = ('length' in opt) ? opt.length : 30;\n    switch (side) {\n        case 'left':\n        dx = -length;\n        break;\n        case 'right':\n        dx = length;\n        break;\n        case 'top':\n        dy = -length;\n        break;\n        case 'bottom':\n        dy = length;\n        break;\n\n    }\n    return joint.anchors.center.call(this, view, magnet, ref, {\n      ...opt,\n      dx,\n      dy\n    }, endType, linkView);\n}\n\n// Base class for the visual elements\nclass AtoElement extends dia.Element {\n    defaults() {\n        return {\n            ...super.defaults,\n            instance_name: null,\n            config_origin_filename: null,\n            config_origin_module: [],\n        };\n    }\n\n    // TODO: need to change to add port and add pins in port\n    addPortWithPins(port_group_name, port_location, pin_list) {\n        let port_label_position = getPortLabelPosition(port_location);\n        let port_anchor = getPortLabelAnchor(port_location);\n        let port_angle = getPortLabelAngle(port_location);\n        let port_position = getPortPosition(port_location);\n\n        let port_group = {};\n\n        port_group[port_group_name] = {\n            position: port_position,\n            attrs: {\n                portBody: {\n                    magnet: true,\n                    r: 2,\n                    fill: '#FFFFFF',\n                    stroke:'#023047',\n                },\n            },\n            label: {\n                position: {\n                    args: {\n                        x: port_label_position[0],\n                        y: port_label_position[1],\n                        angle: port_angle,\n                    }, // Can't use inside/outside in combination\n                    //name: 'inside'\n                },\n                markup: [{\n                    tagName: 'text',\n                    selector: 'label',\n                    className: 'label-text'\n                }]\n            },\n            markup: [{\n                tagName: 'circle',\n                selector: 'portBody'\n            }]\n        };\n\n        // Add the ports list to the element\n        this.prop({\"ports\": { \"groups\": port_group}});\n\n        // While we are creating the port, add the pins in the element\n        for (let pin of pin_list) {\n            this.addPort(createPort(pin['path'], pin['name'], port_group_name, port_anchor, true));\n        }\n    }\n\n    resizeBasedOnContent() {\n        let ports = this.getPorts();\n        if (ports) {\n            let port_buckets = {\n                \"top\": this.getGroupPorts('top'),\n                \"bottom\": this.getGroupPorts('bottom'),\n                \"left\": this.getGroupPorts('left'),\n                \"right\": this.getGroupPorts('right')\n            };\n            let ports_text_length = {\n                \"top\": \"\",\n                \"bottom\": \"\",\n                \"left\": \"\",\n                \"right\": \"\"\n            };\n            let dim_from_text = {\n                \"height\": 0,\n                \"width\": 0\n            };\n            let dim_from_ports = {\n                \"height\": 0,\n                \"width\": 0\n            }\n\n            // Extract the longest port label from each bucket\n            for (let port_bucket in port_buckets) {\n                if (port_buckets[port_bucket].length) {\n                    for (let port of port_buckets[port_bucket]) {\n                        if (port[\"attrs\"][\"label\"][\"text\"].length > ports_text_length[port_bucket].length) {\n                            ports_text_length[port_bucket] = port[\"attrs\"][\"label\"][\"text\"];\n                        }\n                    }\n                }\n            }\n\n            dim_from_text['height'] = 2 * (Math.max(measureText(ports_text_length['top'], settings_dict['component']['fontSize'], \"length\"), measureText(ports_text_length['bottom'], settings_dict['component']['fontSize'], \"length\")));\n            dim_from_text['height'] += measureText(this['attributes']['attrs']['label']['text'], settings_dict['component']['fontSize'], \"height\");\n            dim_from_text['height'] += settings_dict['component']['labelVerticalMargin'] * 2;\n            dim_from_text['width'] = 2 * (Math.max(measureText(ports_text_length['right'], settings_dict['component']['fontSize'], \"length\"), measureText(ports_text_length['left'], settings_dict['component']['fontSize'], \"length\")));\n            dim_from_text['width'] += measureText(this['attributes']['attrs']['label']['text'], settings_dict['component']['fontSize'], \"length\");\n\n            dim_from_ports['height'] = (Math.max(port_buckets['right'].length, port_buckets['left'].length) + 1) * settings_dict['component']['portPitch'];\n            dim_from_ports['width'] = (Math.max(port_buckets['top'].length, port_buckets['bottom'].length) - 1) * settings_dict['component']['portPitch'];\n            dim_from_ports['width'] += 2 * settings_dict['component']['labelHorizontalMargin'];\n            // Feature does not work without moveable ports\n            // if (port_buckets['right'].length != 0 || port_buckets['left'].length != 0) {\n            //     if (port_buckets['top'].length != 0 || port_buckets['bottom'].length != 0) {\n            //         dim_from_ports['width'] += 2 * settings_dict['component']['labelHorizontalMargin'];\n            //     }\n            // }\n\n            this.resize(Math.max(dim_from_text['width'], dim_from_ports['width']), Math.max(dim_from_text['height'], dim_from_ports['height']));\n        }\n    }\n\n    fitAncestorElements() {\n        var padding = settings_dict['common']['parentPadding'];\n        this.fitParent({\n            deep: true,\n            padding: {\n                top: padding,\n                left: padding,\n                right: padding,\n                bottom: padding\n            }\n        });\n    }\n\n    applyParentAttrs(attrs) {\n        if ('position' in attrs) {\n            // Deep setting ensures that the element is placed relative to all parents\n            this.position(attrs['position']['x'], attrs['position']['y'], { deep: true });\n        }\n    }\n}\n\n// Class for a component\nclass AtoComponent extends AtoElement {\n    defaults() {\n        return {\n            ...super.defaults(),\n            type: \"AtoComponent\",\n            attrs: {\n                body: {\n                    fill: \"white\",\n                    z: 10,\n                    stroke: \"black\",\n                    strokeWidth: settings_dict[\"component\"][\"strokeWidth\"],\n                    width: \"calc(w)\",\n                    height: \"calc(h)\",\n                    rx: 5,\n                    ry: 5\n                },\n                label: {\n                    text: \"Component\",\n                    fill: \"black\",\n                    fontSize: settings_dict[\"component\"][\"fontSize\"],\n                    fontWeight: settings_dict[\"component\"][\"fontWeight\"],\n                    textVerticalAnchor: \"middle\",\n                    textAnchor: \"middle\",\n                    fontFamily: settings_dict[\"common\"][\"fontFamily\"],\n                    x: \"calc(w/2)\",\n                    y: \"calc(h/2)\"\n                }\n            }\n        };\n    }\n\n    preinitialize() {\n        this.markup = util.svg`\n            <rect @selector=\"body\" />\n            <text @selector=\"label\" />\n        `;\n    }\n}\n\n// Class for a block\n// For the moment, blocks and components are separate.\n// We might want to combine them in the future.\nclass AtoBlock extends AtoElement {\n    defaults() {\n        return {\n            ...super.defaults(),\n            type: \"AtoComponent\",\n            collapsed: false,\n            attrs: {\n                body: {\n                    fill: \"transparent\",\n                    stroke: \"#333\",\n                    strokeWidth: settings_dict[\"block\"][\"strokeWidth\"],\n                    strokeDasharray: settings_dict[\"block\"][\"strokeDasharray\"],\n                    width: \"calc(w)\",\n                    height: \"calc(h)\",\n                    rx: settings_dict[\"block\"][\"boxRadius\"],\n                    ry: settings_dict[\"block\"][\"boxRadius\"],\n                },\n                label: {\n                    text: \"Block\",\n                    fill: \"black\",\n                    textVerticalAnchor: \"top\",\n                    fontSize: settings_dict['block']['label']['fontSize'],\n                    fontWeight: settings_dict[\"block\"]['label'][\"fontWeight\"],\n                    textAnchor: \"start\",\n                    fontFamily: settings_dict[\"common\"][\"fontFamily\"],\n                    x: 8,\n                    y: 8\n                }\n            }\n        };\n    }\n\n    preinitialize() {\n        this.markup = util.svg`\n            <rect @selector=\"body\" />\n            <text @selector=\"label\" />\n        `;\n    }\n\n    updateChildrenVisibility() {\n        const collapsed = this.isCollapsed();\n        this.getEmbeddedCells().forEach((child) => child.set(\"hidden\", collapsed));\n    }\n}\n\n\nconst cellNamespace = {\n    ...shapes,\n    AtoElement,\n    AtoComponent,\n    AtoBlock\n};\n\nfunction createPort(uuid, port_name, port_group_name, port_anchor) {\n    return {\n        id: uuid,\n        group: port_group_name,\n        attrs: {\n            label: {\n                text: port_name,\n                fontFamily: settings_dict['common']['fontFamily'],\n                fontSize: settings_dict['component']['pin']['fontSize'],\n                fontWeight: settings_dict[\"component\"]['pin'][\"fontWeight\"],\n                textAnchor: port_anchor,\n            },\n        },\n        // markup: '<circle id=\"Oval\" stroke=\"#000000\" fill=\"#FFFFFF\" cx=\"0\" cy=\"0\" r=\"2\"/>'\n    }\n}\n\nfunction getPortLabelPosition(location) {\n    switch (location) {\n        case \"top\":\n            return [0, 5];\n        case \"bottom\":\n            return [0, -5];\n        case \"left\":\n            return [5, 0];\n        case \"right\":\n            return [-5, 0];\n        default:\n            return [0, 0];\n    };\n};\n\nfunction getPortLabelAnchor(location) {\n    switch (location) {\n        case \"top\":\n            return 'end';\n        case \"bottom\":\n            return 'start';\n        case \"left\":\n            return 'start';\n        case \"right\":\n            return 'end';\n        default:\n            return 'middle';\n    }\n};\n\nfunction getPortLabelAngle(location) {\n    switch (location) {\n        case \"top\":\n            return -90;\n        case \"bottom\":\n            return -90;\n        case \"left\":\n            return 0;\n        case \"right\":\n            return 0;\n        default:\n            return 0;\n    };\n};\n\nfunction getPortPosition(location) {\n    switch (location) {\n        case \"top\":\n            return {\n                name: 'line',\n                args: {\n                    start: { x: settings_dict['component']['labelHorizontalMargin'], y: 0 },\n                    end: { x: ('calc(w - ' + settings_dict['component']['labelHorizontalMargin'] + ')'), y: 0 }\n                },\n            };\n        case \"bottom\":\n            return {\n                name: 'line',\n                args: {\n                    start: { x: settings_dict['component']['labelHorizontalMargin'], y: 'calc(h)' },\n                    end: { x: ('calc(w - ' + settings_dict['component']['labelHorizontalMargin'] + ')'), y: 'calc(h)' }\n                },\n            };\n        case \"left\":\n            return {\n                name: 'line',\n                args: {\n                    start: { x: 0, y: settings_dict['component']['labelVerticalMargin']},\n                    end: { x: 0, y: ('calc(h - ' + settings_dict['component']['labelVerticalMargin'] + ')')}\n                },\n            };\n        case \"right\":\n            return {\n                name: 'line',\n                args: {\n                    start: { x: 'calc(w)', y: settings_dict['component']['labelVerticalMargin'] },\n                    end: { x: 'calc(w)', y: ('calc(h - ' + settings_dict['component']['labelVerticalMargin'] + ')')}\n                },\n            };\n        default:\n            return 0;\n    };\n};\n\n// Definitely need to update this garbage at some point\nfunction measureText(text, text_size, direction) {\n    var string = text + '';\n    var lines = string.split(\"\\n\");\n    var width = 0;\n    for (let line of lines) {\n        var length = line.length;\n        if (length > width) {\n            width = length;\n        };\n    };\n    if (direction == 'length') {\n        // divide by 3 to go from font size to pxl, will have to fix\n        return width * text_size * settings_dict['common']['fontLengthToPxRatio'];\n    }\n    else if (direction == 'height') {\n        return lines.length * text_size * settings_dict['common']['fontHeightToPxRatio'];\n    }\n    else {\n        return 0;\n    }\n};\n\nfunction addStub(block_id, port_id, label) {\n    let added_stub = new shapes.standard.Link({\n        source: {\n            id: block_id,\n            port: port_id,\n            anchor: {\n                name: 'center'\n            }\n        },\n            target: {\n            id: block_id,\n            port: port_id,\n            anchor: {\n                name: 'customAnchor'\n            },\n            connectionPoint: {\n                name: 'anchor'\n            }\n        }\n    });\n    added_stub.attr({\n        line: {\n            'stroke': settings_dict['link']['color'],\n            'stroke-width': settings_dict['link']['strokeWidth'],\n            targetMarker: {'type': 'none'},\n        },\n        z: 0,\n    });\n    added_stub.appendLabel({\n        attrs: {\n            text: {\n                text: label,\n                fontFamily: settings_dict['common']['fontFamily'],\n                fontSize: settings_dict['stubs']['fontSize'],\n                //textVerticalAnchor: \"middle\",\n                textAnchor: \"middle\",\n            }\n        },\n        position: {\n            distance: .9,\n            offset: -5,\n            angle: 0,\n            args: {\n                keepGradient: true,\n                ensureLegibility: true,\n            }\n        }\n    });\n    graph.addCell(added_stub);\n}\n\nfunction addLink(source_block_id, source_port_id, target_block_id, target_port_id) {\n    var added_link = new shapes.standard.Link({\n        source: {\n            id: source_block_id,\n            port: source_port_id\n        },\n        target: {\n            id: target_block_id,\n            port: target_port_id\n        }\n    });\n    added_link.attr({\n        line: {\n            'stroke': settings_dict['link']['color'],\n            'stroke-width': settings_dict['link']['strokeWidth'],\n            targetMarker: {'type': 'none'},\n        },\n        z: 0\n    });\n    added_link.router('manhattan', {\n        perpendicular: true,\n        step: settings_dict['common']['gridSize'],\n    });\n    added_link.addTo(graph);\n}\n\n// Return the cell id and port id from port name and current path\n// If the link spans deeper than one module, a port is added to the module\n// TODO: what happens if the port is multiple layers deep?\n// TODO: Currently only adding the top link\nfunction getLinkAddress(port, current_path, embedded_cells) {\n    let port_path = concatenatePathAndName(current_path, port);\n    let port_name_depth = computeNameDepth(port);\n    let cell_id;\n    let first_element;\n\n    switch (port_name_depth) {\n        case 1:\n            cell_id = current_path;\n            break;\n        case 2:\n            first_element = popFirstNameElementFromName(port);\n            cell_id = concatenatePathAndName(current_path, first_element['pop']);\n            break;\n        default:\n            console.log('default');\n            first_element = popFirstNameElementFromName(port);\n            cell_id = concatenatePathAndName(current_path, first_element['pop']);\n            for (let cell of embedded_cells) {\n                if (cell['id'] == cell_id) {\n                    cell.addPortWithPins('top', 'top', [{'path': port_path, 'name': first_element['remaining']}])\n                }\n            }\n            break;\n    }\n    console.log({'cell_id': cell_id, 'port_id': port_path});\n    return {'cell_id': cell_id, 'port_id': port_path};\n}\n\n\nfunction addLinks(element, current_path, embedded_cells) {\n    for (let link of element['links']) {\n        let source_address = getLinkAddress(link['source'], current_path, embedded_cells);\n        let target_address = getLinkAddress(link['target'], current_path, embedded_cells);\n\n        let is_stub = false;\n        for (let link_config of ((element.config || {}).signals || [])) {\n            if (link_config['name'] == link['name'] && link_config['is_stub']) {\n                is_stub = true;\n                // if not a module (don't want stubs at module level)\n                if (current_path.length != source_address['cell_id'].length) {\n                    addStub(source_address['cell_id'], source_address['port_id'], link['name']);\n                }\n                // if not a module (don;t want stubs at module level)\n                if (current_path.length != target_address['cell_id'].length) {\n                    addStub(target_address['cell_id'], target_address['port_id'], link['name']);\n                }\n            }\n        }\n        if (!is_stub) {\n            addLink(source_address['cell_id'], source_address['port_id'], target_address['cell_id'], target_address['port_id']);\n        }\n    }\n}\n\nfunction getElementTitle(element) {\n    if (element['instance_of'] != null) {\n        return`${element['name']} \\n(${popLastPathElementFromPath(element['instance_of']).name})`;\n    } else {\n        return element['name'];;\n    }\n}\n\nfunction addPins(jointJSObject, element, path) {\n    // Create the default port location\n    let ports_to_add = {};\n\n    // Create the ports that are defined in the config\n    for (let port of ((element.config || {}).ports || [])) {\n        ports_to_add[(port.name || \"top\")] = {\n            \"location\": (port.location || \"top\"),\n            \"pins\": []\n        }\n    }\n\n    let config_found;\n    for (let pin_to_add of element['pins']) {\n\n        pin_to_add['path'] = concatenatePathAndName(path, pin_to_add['name']);\n\n        config_found = false;\n        for (let config_pin of ((element.config || {}).pins || [])) {\n            // If a port is defined, add it to it designated port\n            if (pin_to_add['name'] == config_pin['name']) {\n                ports_to_add[config_pin['port']]['pins'].push(pin_to_add);\n                config_found = true;\n            }\n        }\n        // If no port is defined, add it to the default port\n        if (!config_found) {\n            if (!ports_to_add['top']) ports_to_add['top'] = {\"location\": \"top\", \"pins\": []};\n            ports_to_add['top']['pins'].push(pin_to_add);\n        }\n    }\n\n    for (let port in ports_to_add) {\n        if (ports_to_add[port]['pins'].length > 0) {\n            jointJSObject.addPortWithPins(port, ports_to_add[port]['location'], ports_to_add[port]['pins']);\n        }\n    }\n}\n\nfunction createComponent(element, parent, path) {\n    let title = getElementTitle(element);\n    let comp_width = measureText(title, settings_dict['component']['pin']['fontSize'], 'length') + 2 * settings_dict['component']['titleMargin'];\n    let comp_height = measureText(title, settings_dict['component']['pin']['fontSize'], 'height') + 2 * settings_dict['component']['titleMargin'];\n    var component = new AtoComponent({\n        id: path,\n        instance_name: element['name'],\n        size: { width: comp_width,\n                height: comp_height},\n        attrs: {\n            label: {\n                text: title,\n            }\n        },\n        config_origin_filename: element.config_origin_filename,\n        config_origin_module: element.config_origin_module,\n    });\n\n    addPins(component, element, path);\n    component.resizeBasedOnContent();\n    component.addTo(graph);\n\n    if (parent) {\n        addElementToElement(component, parent);\n    }\n\n    return component;\n}\n\nfunction createBlock(element, parent, path) {\n    let title = getElementTitle(element);\n    let block = new AtoBlock({\n        id: path,\n        instance_name: element['name'],\n        size: {\n            width: 200,\n            height: 100\n        },\n        attrs: {\n            label: {\n                text: title,\n            }\n        },\n        config_origin_filename: element.config_origin_filename,\n        config_origin_module: element.config_origin_module,\n    });\n\n    addPins(block, element, path);\n    block.addTo(graph);\n\n    if (parent) {\n        addElementToElement(block, parent);\n    }\n\n    return block;\n}\n\nfunction addElementToElement(block_to_add, to_block) {\n    to_block.embed(block_to_add);\n}\n\nfunction returnConfigFileName(string) {\n    if (string) {\n        const [file, module] = string.split(\":\");\n        return {\"file\": file, \"module\": module}\n    }\n    else return null;\n}\n\nfunction concatenatePathAndName(path, name) {\n    if (path == null) {\n        return name + ':'\n    }\n    else if (path.slice(-1) == ':') {\n        return path + name;\n    }\n    else {\n        return path + '.' + name;\n    }\n}\n\n// This function does not support complete paths\n// Only names that are separated by a .\nfunction computeNameDepth(path) {\n    let name_list = path.split(\".\");\n    return name_list.length;\n}\n\nfunction popFirstNameElementFromName(name) {\n    // Split the blocks\n    const blocks = name.split(\".\");\n    const remaining_blocks = blocks.slice(1, blocks.length);\n    const remaining_name = remaining_blocks.join('.');\n    const pop = blocks[0];\n    return {'pop': pop, 'remaining': remaining_name};\n}\n\nfunction popLastPathElementFromPath(path) {\n    // Split the file name and the blocks\n    const file_block = path.split(\":\");\n    const file = file_block[0];\n    // Split the blocks\n    const blocks = file_block[1].split(\".\");\n    const path_blocks = blocks.slice(0, blocks.length - 1);\n    const remaining_path = file + ':' + path_blocks.join('.');\n    const name = blocks[blocks.length - 1];\n    return {'file': file, 'path': remaining_path, 'name': name};\n}\n\nfunction applyParentConfig(element, child_attrs) {\n    if (child_attrs !== null && Object.keys(child_attrs).length > 0) {\n        for (let attrs in child_attrs) {\n            if (attrs == element['name']) {\n                element['jointObject'].applyParentAttrs(child_attrs[attrs]);\n            }\n        }\n    }\n}\n\nasync function generateJointjsGraph(circuit, max_depth, current_depth = 0, path = null, parent = null, child_attrs = null) {\n    let downstream_path;\n    let new_depth = current_depth + 1;\n\n    if (current_depth <= max_depth) {\n        for (let element of circuit) {\n            var joint_object = null;\n\n            if (element['type'] == 'component') {\n                downstream_path = concatenatePathAndName(path, element['name']);\n                joint_object = createComponent(element, parent, downstream_path);\n                element['jointObject'] = joint_object;\n                if (parent) {\n                    addElementToElement(joint_object, parent);\n                }\n                applyParentConfig(element, child_attrs);\n            }\n\n            // If it is a block, create it and instantiate the contents within it\n            else if (element['type'] == 'module') {\n                downstream_path = concatenatePathAndName(path, element['name']);\n                // Create the module\n                joint_object = createBlock(element, parent, downstream_path);\n                element['jointObject'] = joint_object;\n                if (parent) {\n                    addElementToElement(joint_object, parent);\n                }\n\n                // Call the function recursively on children\n                if (await generateJointjsGraph(element['blocks'], max_depth, new_depth, downstream_path, joint_object, element['config']['child_attrs'])) {\n                    addLinks(element, downstream_path, joint_object.getEmbeddedCells());\n                    applyParentConfig(element, child_attrs);\n                }\n\n                // FIXME:\n                // Position the root element in the middle of the screen\n                if (current_depth == 0) {\n                    let paperSize = paper.getComputedSize();\n                    let rootSize = joint_object.size();\n\n                    // Calculate the position for the center of the paper.\n                    let posX = (paperSize.width / 2) - (rootSize.width / 2);\n                    let posY = (paperSize.height / 2) - (rootSize.height / 2);\n\n                    // Position the rectangle in the center of the paper.\n                    joint_object.position(posX, posY);\n                    // TODO: bring the other content with it\n                }\n            }\n\n            else if (element['type'] == 'file') {\n                downstream_path = concatenatePathAndName(path, element['name']);\n                await generateJointjsGraph(element['blocks'], max_depth, new_depth, downstream_path);\n            }\n\n            else {\n                // raise an error because we don't know what to do with this element\n                // TODO: raise an error\n                console.log('Unknown element type: ' + element['type']);\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nasync function populateConfigFromBackend(circuit_dict, file_name = null) {\n    let populated_circuit = [];\n    let config_location_name;\n\n    for (let element of circuit_dict) {\n        if (element.type == 'component') {\n            if (element.instance_of !== null) {\n                config_location_name = returnConfigFileName(element.instance_of);\n                element.config_origin_filename = getConfigFilenameFromAto(config_location_name.file);\n                element.config_origin_module = config_location_name.module;\n                const config = await loadFileConfig(config_location_name.file);\n                element['config'] = config[config_location_name.module] || {};\n            }\n        }\n        else if (element.type == 'module') {\n            let config = null;\n            element.config = {};\n            if (element.instance_of !== null) {\n                config_location_name = returnConfigFileName(element.instance_of);\n                element.config_origin_filename = getConfigFilenameFromAto(config_location_name.file);\n                element.config_origin_module = config_location_name.module;\n                config = await loadFileConfig(config_location_name.file);\n            }\n\n            if (config) {\n                if (Object.keys(config).length !== 0) {\n                    if (config.hasOwnProperty(config_location_name['module'])) {\n                        element['config'] = config[config_location_name['module']];\n                    }\n                }\n            }\n            element['blocks'] = await populateConfigFromBackend(element['blocks']);\n        }\n        else if (element['type'] == 'file') {\n            // If file, the following block will not be an instance, so it needs to know it's parent file\n            // to fetch the config\n            element['blocks'] = await populateConfigFromBackend(element['blocks'], element['name']);\n        }\n        else {\n            console.log(\"unknown block type\");\n        }\n        populated_circuit.push(element);\n    }\n    return populated_circuit;\n}\n\nconst graph = new dia.Graph({}, { cellNamespace });\nconst paper = new joint.dia.Paper({\n    el: document.getElementById('atopilePaper'),\n    model: graph,\n    width: '100%',\n    height: '100%',\n    gridSize: settings_dict['common']['gridSize'],\n    drawGrid: true,\n    background: {\n        color: settings_dict[\"common\"][\"backgroundColor\"]\n    },\n    interactive: true,\n    snapLinks: true,\n    linkPinning: false,\n    magnetThreshold: 'onleave',\n    cellViewNamespace: cellNamespace,\n    anchorNamespace: {\n        ...joint.anchors,\n        customAnchor\n    }\n});\n\nfunction fill_paper() {\n    paper.setDimensions(window.innerWidth, window.innerHeight);\n}\n\nwindow.onload = fill_paper;\nwindow.onresize = fill_paper;\n\nlet pin_to_element_association = {};\n\npaper.on('link:mouseenter', function(linkView) {\n    linkView.showTools();\n    linkView.highlight();\n});\n\npaper.on('link:mouseleave', function(linkView) {\n    linkView.hideTools();\n    linkView.unhighlight();\n});\n\ngraph.on('change:position', function(cell) {\n    // `fitParent()` method is defined at `joint.shapes.container.Base` in `./joint.shapes.container.js`\n    cell.fitAncestorElements();\n});\n\nfunction getConfigFilenameFromAto(ato_file_name) {\n    // Strip .ato from the name\n    let striped_file_name = ato_file_name.replace(\".ato\", \"\");\n    return  striped_file_name + '.vis.json';\n}\n\n// Fetch a file visual config from the server\nasync function loadFileConfig(file_name) {\n    let address = \"/api/config/\" + getConfigFilenameFromAto(file_name);\n    //address = \"/api/circuit/bike_light.ato:BikeLight\";\n    let response;\n    try {\n        response = await fetch(address);\n    } catch (error) {\n        console.log('Could not fetch config ', error);\n    }\n\n    if (response.ok) {\n        return await response.json();\n    } else {\n        console.log(`HTTP Response Code: ${response?.status}`)\n        return null;\n    }\n}\n\n// Fetch a circuit dict from the server\nasync function loadCircuit() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const response = await fetch('/api/circuit/' + urlParams.get('circuit'));\n    const circuit_data = await response.json();\n    console.log(\"data received from backend\")\n    console.log(circuit_data);\n\n    let config_populated_circuit = await populateConfigFromBackend([circuit_data]);\n    console.log(config_populated_circuit);\n    generateJointjsGraph(config_populated_circuit, 1);\n}\n\n// flag to help rate limit calls to savePositions\nvar stuff_has_moved = false;\n\npaper.on('cell:pointerup', function(cell, evt, x, y) {\n    if (cell.model instanceof AtoComponent || cell.model instanceof AtoBlock) {\n        stuff_has_moved = true;\n    }\n});\n\nfunction savePositions() {\n    let requests_to_make = {};\n\n    graph.getCells().forEach(function(cell) {\n        if (cell instanceof AtoComponent || cell instanceof AtoBlock) {\n            console.log(cell.id);\n\n            let parent = cell.getParentCell();\n            if (!parent) return; // skip the root element\n\n            let origin_file = parent.attributes.config_origin_filename;\n            let origin_module = parent.attributes.config_origin_module;\n            let instance_name = cell.attributes.instance_name;\n\n            if (!requests_to_make[origin_file]) requests_to_make[origin_file] = {};\n            if (!requests_to_make[origin_file][origin_module]) requests_to_make[origin_file][origin_module] = {\"child_attrs\": {}};\n            requests_to_make[origin_file][origin_module][\"child_attrs\"][instance_name] = {\n                \"position\": {\n                    x: cell.attributes.position.x - parent.attributes.position.x,\n                    y: cell.attributes.position.y - parent.attributes.position.y,\n                }\n            };\n        }\n    });\n\n    for (let origin_file in requests_to_make) {\n        let requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(requests_to_make[origin_file])\n        };\n        fetch('/api/config/' + origin_file, requestOptions);\n    }\n\n    // reset the flag\n    stuff_has_moved = false;\n}\n\n// rate limit the calls to savePositions\nsetInterval(function() {\n    if (stuff_has_moved) {\n        console.log(\"saving positions\");\n        savePositions();\n    }\n}, 1000);\n\nloadCircuit();\n"],"names":["shapes","$32645a58a1866f09$var$shapes","util","$32645a58a1866f09$var$util","dia","$32645a58a1866f09$var$dia","anchors","$32645a58a1866f09$var$anchors","joint","$32645a58a1866f09$var$settings_dict","common","backgroundColor","gridSize","parentPadding","fontFamily","fontHeightToPxRatio","fontLengthToPxRatio","component","strokeWidth","fontSize","fontWeight","defaultWidth","portPitch","defaultHeight","labelHorizontalMargin","labelVerticalMargin","titleMargin","pin","block","boxRadius","strokeDasharray","label","link","color","stubs","$32645a58a1866f09$var$AtoElement","Element","defaults","instance_name","config_origin_filename","config_origin_module","addPortWithPins","port_group_name","port_location","pin_list","port_label_position","$32645a58a1866f09$var$getPortLabelPosition","location","port_anchor","$32645a58a1866f09$var$getPortLabelAnchor","port_angle","$32645a58a1866f09$var$getPortLabelAngle","port_position","$32645a58a1866f09$var$getPortPosition","name","args","start","x","y","end","port_group","position","attrs","portBody","magnet","r","fill","stroke","angle","markup","tagName","selector","className","prop","uuid","addPort","id","group","text","textAnchor","resizeBasedOnContent","getPorts","port_buckets","getGroupPorts","ports_text_length","dim_from_text","dim_from_ports","port_bucket","length","port","Math","max","$32645a58a1866f09$var$measureText","resize","fitAncestorElements","padding","fitParent","deep","top","left","right","bottom","applyParentAttrs","$32645a58a1866f09$var$AtoComponent","type","body","z","width","height","rx","ry","textVerticalAnchor","preinitialize","svg","$32645a58a1866f09$var$AtoBlock","collapsed","updateChildrenVisibility","isCollapsed","getEmbeddedCells","forEach","child","set","$32645a58a1866f09$var$cellNamespace","AtoElement","AtoComponent","AtoBlock","text_size","direction","lines","string","split","line","$32645a58a1866f09$var$addStub","block_id","port_id","added_stub","standard","Link","source","anchor","target","connectionPoint","attr","targetMarker","appendLabel","distance","offset","keepGradient","ensureLegibility","$32645a58a1866f09$var$graph","addCell","$32645a58a1866f09$var$getLinkAddress","current_path","embedded_cells","cell_id","first_element","port_path","$32645a58a1866f09$var$concatenatePathAndName","name_list","path","$32645a58a1866f09$var$popFirstNameElementFromName","cell","console","log","$32645a58a1866f09$var$getElementTitle","element","$32645a58a1866f09$var$popLastPathElementFromPath","file_block","file","blocks","path_blocks","slice","remaining_path","join","$32645a58a1866f09$var$addPins","jointJSObject","config_found","ports_to_add","config","ports","pin_to_add","config_pin","pins","push","$32645a58a1866f09$var$addElementToElement","block_to_add","to_block","embed","$32645a58a1866f09$var$returnConfigFileName","module","remaining_blocks","remaining_name","pop","$32645a58a1866f09$var$applyParentConfig","child_attrs","Object","keys","$32645a58a1866f09$var$generateJointjsGraph","circuit","max_depth","current_depth","parent","downstream_path","new_depth","joint_object","$32645a58a1866f09$var$createComponent","title","comp_width","comp_height","size","addTo","$32645a58a1866f09$var$createBlock","$32645a58a1866f09$var$addLinks","source_address","target_address","is_stub","link_config","signals","$32645a58a1866f09$var$addLink","source_block_id","source_port_id","target_block_id","target_port_id","added_link","router","perpendicular","step","paperSize","$32645a58a1866f09$var$paper","getComputedSize","rootSize","posX","posY","$32645a58a1866f09$var$populateConfigFromBackend","circuit_dict","file_name","config_location_name","populated_circuit","instance_of","$32645a58a1866f09$var$getConfigFilenameFromAto","$32645a58a1866f09$var$loadFileConfig","hasOwnProperty","Graph","cellNamespace","Paper","el","document","getElementById","model","drawGrid","background","interactive","snapLinks","linkPinning","magnetThreshold","cellViewNamespace","anchorNamespace","customAnchor","view","ref","opt","endType","linkView","elBBox","getBBox","magnetCenter","getNodeBBox","center","side","sideNearestToPoint","dx","dy","call","$32645a58a1866f09$var$fill_paper","setDimensions","window","innerWidth","innerHeight","ato_file_name","striped_file_name","replace","response","address","fetch","error","ok","json","status","$32645a58a1866f09$var$loadCircuit","urlParams","URLSearchParams","search","get","circuit_data","config_populated_circuit","onload","onresize","on","showTools","highlight","hideTools","unhighlight","$32645a58a1866f09$var$stuff_has_moved","evt","setInterval","$32645a58a1866f09$var$savePositions","requests_to_make","origin_file","getCells","getParentCell","attributes","origin_module","requestOptions","method","headers","JSON","stringify"],"version":3,"file":"client.2381c90d.js.map"}